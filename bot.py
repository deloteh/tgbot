import logging
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor
import requests
from bs4 import BeautifulSoup

# –¢–≤–æ–π Telegram API —Ç–æ–∫–µ–Ω
TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
# –¢–≤–æ–π OpenAI API –∫–ª—é—á
OPENAI_API_KEY = "YOUR_OPENAI_API_KEY"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

openai.api_key = OPENAI_API_KEY

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
def extract_text_from_url(url):
    try:
        response = requests.get(url, timeout=5)
        soup = BeautifulSoup(response.text, "html.parser")
        paragraphs = soup.find_all("p")
        text = " ".join([p.get_text() for p in paragraphs])
        return text[:4000]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç GPT
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}"

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–µ–π–∫–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ ChatGPT
def check_fake_news(text):
    prompt = f"–û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å —Ñ–µ–π–∫–æ–≤–æ–π:\n{text}"
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return response["choices"][0]["message"]["content"]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ—ë –Ω–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫
@dp.message_handler(lambda message: message.text.startswith("http"))
async def handle_url(message: Message):
    await message.answer("–ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤–æ—Å—Ç—å, –ø–æ–¥–æ–∂–¥–∏...")
    text = extract_text_from_url(message.text)
    if "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞" in text:
        await message.answer(text)
        return

    analysis = check_fake_news(text)
    await message.answer(f"üîç –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–∏:\n{analysis}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
